/****************************************************************************
** Meta object code from reading C++ file 'SessionIT.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.7.0)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'SessionIT.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.7.0. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
struct qt_meta_stringdata_SessionIT_t {
    QByteArrayData data[28];
    char stringdata0[1413];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_SessionIT_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_SessionIT_t qt_meta_stringdata_SessionIT = {
    {
QT_MOC_LITERAL(0, 0, 9), // "SessionIT"
QT_MOC_LITERAL(1, 10, 4), // "init"
QT_MOC_LITERAL(2, 15, 0), // ""
QT_MOC_LITERAL(3, 16, 7), // "cleanup"
QT_MOC_LITERAL(4, 24, 37), // "selectOneBySql_noPersonExists..."
QT_MOC_LITERAL(5, 62, 45), // "selectOneBySql_onePersonIsSel..."
QT_MOC_LITERAL(6, 108, 46), // "selectOneBySql_twoPersonsAreS..."
QT_MOC_LITERAL(7, 155, 76), // "selectOneBySql_onePersonWithN..."
QT_MOC_LITERAL(8, 232, 90), // "selectOneBySql_onePersonWithI..."
QT_MOC_LITERAL(9, 323, 92), // "selectOneBySql_onePersonWithN..."
QT_MOC_LITERAL(10, 416, 58), // "selectOneBySql_onePersonIsSel..."
QT_MOC_LITERAL(11, 475, 32), // "selectOne_noPersonExists_nullptr"
QT_MOC_LITERAL(12, 508, 40), // "selectOne_onePersonIsSelected..."
QT_MOC_LITERAL(13, 549, 85), // "selectOne_onePersonWithIdIsSe..."
QT_MOC_LITERAL(14, 635, 58), // "selectOne_personWithOneToMany..."
QT_MOC_LITERAL(15, 694, 35), // "selectManyBySql_noPersons_emp..."
QT_MOC_LITERAL(16, 730, 45), // "selectManyBySql_select2Person..."
QT_MOC_LITERAL(17, 776, 82), // "selectManyBySql_selectOnePers..."
QT_MOC_LITERAL(18, 859, 59), // "selectManyBySql_onePersonIsSe..."
QT_MOC_LITERAL(19, 919, 30), // "selectMany_noPersons_emptyList"
QT_MOC_LITERAL(20, 950, 40), // "selectMany_select2Persons_lis..."
QT_MOC_LITERAL(21, 991, 77), // "selectMany_selectOnePersonWit..."
QT_MOC_LITERAL(22, 1069, 54), // "selectMany_onePersonIsSelecte..."
QT_MOC_LITERAL(23, 1124, 42), // "save_newPerson_personIsPersis..."
QT_MOC_LITERAL(24, 1167, 67), // "save_newPersonWithCustomMappi..."
QT_MOC_LITERAL(25, 1235, 103), // "save_newPersonWithAddressRela..."
QT_MOC_LITERAL(26, 1339, 35), // "save_existingPerson_personIsU..."
QT_MOC_LITERAL(27, 1375, 37) // "remove_existingPerson_personI..."

    },
    "SessionIT\0init\0\0cleanup\0"
    "selectOneBySql_noPersonExists_nullptr\0"
    "selectOneBySql_onePersonIsSelected_thatPerson\0"
    "selectOneBySql_twoPersonsAreSelected_exception\0"
    "selectOneBySql_onePersonWithNameOnlyIsSelected_onePersonWithNameOnlyIs"
    "Filled\0"
    "selectOneBySql_onePersonWithIdIsSelectedTwice_bothResultsShouldBeIdent"
    "icalBecauseOfCaching\0"
    "selectOneBySql_onePersonWithNameIsSelectedTwice_bothResultsShouldDiffe"
    "rentBecauseOfNoCaching\0"
    "selectOneBySql_onePersonIsSelectedById_thePersonWithThatId\0"
    "selectOne_noPersonExists_nullptr\0"
    "selectOne_onePersonIsSelected_thatPerson\0"
    "selectOne_onePersonWithIdIsSelectedTwice_bothResultsShouldBeIdenticalB"
    "ecauseOfCaching\0"
    "selectOne_personWithOneToManyRelation_relationWillBeFilled\0"
    "selectManyBySql_noPersons_emptyList\0"
    "selectManyBySql_select2Persons_listOf2Persons\0"
    "selectManyBySql_selectOnePersonWithIdTwoTimes_bothVersionsAreIdentical"
    "DueToCaching\0"
    "selectManyBySql_onePersonIsSelectedById_thePersonWithThatId\0"
    "selectMany_noPersons_emptyList\0"
    "selectMany_select2Persons_listOf2Persons\0"
    "selectMany_selectOnePersonWithIdTwoTimes_bothVersionsAreIdenticalDueTo"
    "Caching\0"
    "selectMany_onePersonIsSelectedById_thePersonWithThatId\0"
    "save_newPerson_personIsPersistetAndIdIsSet\0"
    "save_newPersonWithCustomMapping_onlyFieldsOfThatMappingArePersistet\0"
    "save_newPersonWithAddressRelation_personAndReferencedAddressIdIsPersis"
    "tetButAddressDatasetStaysUntuched\0"
    "save_existingPerson_personIsUpdated\0"
    "remove_existingPerson_personIsDeleted"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_SessionIT[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      26,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  144,    2, 0x08 /* Private */,
       3,    0,  145,    2, 0x08 /* Private */,
       4,    0,  146,    2, 0x08 /* Private */,
       5,    0,  147,    2, 0x08 /* Private */,
       6,    0,  148,    2, 0x08 /* Private */,
       7,    0,  149,    2, 0x08 /* Private */,
       8,    0,  150,    2, 0x08 /* Private */,
       9,    0,  151,    2, 0x08 /* Private */,
      10,    0,  152,    2, 0x08 /* Private */,
      11,    0,  153,    2, 0x08 /* Private */,
      12,    0,  154,    2, 0x08 /* Private */,
      13,    0,  155,    2, 0x08 /* Private */,
      14,    0,  156,    2, 0x08 /* Private */,
      15,    0,  157,    2, 0x08 /* Private */,
      16,    0,  158,    2, 0x08 /* Private */,
      17,    0,  159,    2, 0x08 /* Private */,
      18,    0,  160,    2, 0x08 /* Private */,
      19,    0,  161,    2, 0x08 /* Private */,
      20,    0,  162,    2, 0x08 /* Private */,
      21,    0,  163,    2, 0x08 /* Private */,
      22,    0,  164,    2, 0x08 /* Private */,
      23,    0,  165,    2, 0x08 /* Private */,
      24,    0,  166,    2, 0x08 /* Private */,
      25,    0,  167,    2, 0x08 /* Private */,
      26,    0,  168,    2, 0x08 /* Private */,
      27,    0,  169,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void SessionIT::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        SessionIT *_t = static_cast<SessionIT *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->init(); break;
        case 1: _t->cleanup(); break;
        case 2: _t->selectOneBySql_noPersonExists_nullptr(); break;
        case 3: _t->selectOneBySql_onePersonIsSelected_thatPerson(); break;
        case 4: _t->selectOneBySql_twoPersonsAreSelected_exception(); break;
        case 5: _t->selectOneBySql_onePersonWithNameOnlyIsSelected_onePersonWithNameOnlyIsFilled(); break;
        case 6: _t->selectOneBySql_onePersonWithIdIsSelectedTwice_bothResultsShouldBeIdenticalBecauseOfCaching(); break;
        case 7: _t->selectOneBySql_onePersonWithNameIsSelectedTwice_bothResultsShouldDifferentBecauseOfNoCaching(); break;
        case 8: _t->selectOneBySql_onePersonIsSelectedById_thePersonWithThatId(); break;
        case 9: _t->selectOne_noPersonExists_nullptr(); break;
        case 10: _t->selectOne_onePersonIsSelected_thatPerson(); break;
        case 11: _t->selectOne_onePersonWithIdIsSelectedTwice_bothResultsShouldBeIdenticalBecauseOfCaching(); break;
        case 12: _t->selectOne_personWithOneToManyRelation_relationWillBeFilled(); break;
        case 13: _t->selectManyBySql_noPersons_emptyList(); break;
        case 14: _t->selectManyBySql_select2Persons_listOf2Persons(); break;
        case 15: _t->selectManyBySql_selectOnePersonWithIdTwoTimes_bothVersionsAreIdenticalDueToCaching(); break;
        case 16: _t->selectManyBySql_onePersonIsSelectedById_thePersonWithThatId(); break;
        case 17: _t->selectMany_noPersons_emptyList(); break;
        case 18: _t->selectMany_select2Persons_listOf2Persons(); break;
        case 19: _t->selectMany_selectOnePersonWithIdTwoTimes_bothVersionsAreIdenticalDueToCaching(); break;
        case 20: _t->selectMany_onePersonIsSelectedById_thePersonWithThatId(); break;
        case 21: _t->save_newPerson_personIsPersistetAndIdIsSet(); break;
        case 22: _t->save_newPersonWithCustomMapping_onlyFieldsOfThatMappingArePersistet(); break;
        case 23: _t->save_newPersonWithAddressRelation_personAndReferencedAddressIdIsPersistetButAddressDatasetStaysUntuched(); break;
        case 24: _t->save_existingPerson_personIsUpdated(); break;
        case 25: _t->remove_existingPerson_personIsDeleted(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject SessionIT::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_SessionIT.data,
      qt_meta_data_SessionIT,  qt_static_metacall, Q_NULLPTR, Q_NULLPTR}
};


const QMetaObject *SessionIT::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *SessionIT::qt_metacast(const char *_clname)
{
    if (!_clname) return Q_NULLPTR;
    if (!strcmp(_clname, qt_meta_stringdata_SessionIT.stringdata0))
        return static_cast<void*>(const_cast< SessionIT*>(this));
    return QObject::qt_metacast(_clname);
}

int SessionIT::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 26)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 26;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 26)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 26;
    }
    return _id;
}
QT_END_MOC_NAMESPACE
